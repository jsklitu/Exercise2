// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CriticalSectionServiceClient is the client API for CriticalSectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriticalSectionServiceClient interface {
	Receive(ctx context.Context, opts ...grpc.CallOption) (CriticalSectionService_ReceiveClient, error)
}

type criticalSectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalSectionServiceClient(cc grpc.ClientConnInterface) CriticalSectionServiceClient {
	return &criticalSectionServiceClient{cc}
}

func (c *criticalSectionServiceClient) Receive(ctx context.Context, opts ...grpc.CallOption) (CriticalSectionService_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &CriticalSectionService_ServiceDesc.Streams[0], "/proto.CriticalSectionService/receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &criticalSectionServiceReceiveClient{stream}
	return x, nil
}

type CriticalSectionService_ReceiveClient interface {
	Send(*Message) error
	CloseAndRecv() (*Close, error)
	grpc.ClientStream
}

type criticalSectionServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *criticalSectionServiceReceiveClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *criticalSectionServiceReceiveClient) CloseAndRecv() (*Close, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Close)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CriticalSectionServiceServer is the server API for CriticalSectionService service.
// All implementations must embed UnimplementedCriticalSectionServiceServer
// for forward compatibility
type CriticalSectionServiceServer interface {
	Receive(CriticalSectionService_ReceiveServer) error
	mustEmbedUnimplementedCriticalSectionServiceServer()
}

// UnimplementedCriticalSectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCriticalSectionServiceServer struct {
}

func (UnimplementedCriticalSectionServiceServer) Receive(CriticalSectionService_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedCriticalSectionServiceServer) mustEmbedUnimplementedCriticalSectionServiceServer() {
}

// UnsafeCriticalSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalSectionServiceServer will
// result in compilation errors.
type UnsafeCriticalSectionServiceServer interface {
	mustEmbedUnimplementedCriticalSectionServiceServer()
}

func RegisterCriticalSectionServiceServer(s grpc.ServiceRegistrar, srv CriticalSectionServiceServer) {
	s.RegisterService(&CriticalSectionService_ServiceDesc, srv)
}

func _CriticalSectionService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CriticalSectionServiceServer).Receive(&criticalSectionServiceReceiveServer{stream})
}

type CriticalSectionService_ReceiveServer interface {
	SendAndClose(*Close) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type criticalSectionServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *criticalSectionServiceReceiveServer) SendAndClose(m *Close) error {
	return x.ServerStream.SendMsg(m)
}

func (x *criticalSectionServiceReceiveServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CriticalSectionService_ServiceDesc is the grpc.ServiceDesc for CriticalSectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriticalSectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CriticalSectionService",
	HandlerType: (*CriticalSectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "receive",
			Handler:       _CriticalSectionService_Receive_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
