// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CriticalSectionServiceClient is the client API for CriticalSectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CriticalSectionServiceClient interface {
	Request(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
	Reply(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
	Release(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
}

type criticalSectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCriticalSectionServiceClient(cc grpc.ClientConnInterface) CriticalSectionServiceClient {
	return &criticalSectionServiceClient{cc}
}

func (c *criticalSectionServiceClient) Request(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.CriticalSectionService/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalSectionServiceClient) Reply(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.CriticalSectionService/Reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *criticalSectionServiceClient) Release(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.CriticalSectionService/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CriticalSectionServiceServer is the server API for CriticalSectionService service.
// All implementations must embed UnimplementedCriticalSectionServiceServer
// for forward compatibility
type CriticalSectionServiceServer interface {
	Request(context.Context, *Message) (*Close, error)
	Reply(context.Context, *Message) (*Close, error)
	Release(context.Context, *Message) (*Close, error)
	mustEmbedUnimplementedCriticalSectionServiceServer()
}

// UnimplementedCriticalSectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCriticalSectionServiceServer struct {
}

func (UnimplementedCriticalSectionServiceServer) Request(context.Context, *Message) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedCriticalSectionServiceServer) Reply(context.Context, *Message) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedCriticalSectionServiceServer) Release(context.Context, *Message) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedCriticalSectionServiceServer) mustEmbedUnimplementedCriticalSectionServiceServer() {
}

// UnsafeCriticalSectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CriticalSectionServiceServer will
// result in compilation errors.
type UnsafeCriticalSectionServiceServer interface {
	mustEmbedUnimplementedCriticalSectionServiceServer()
}

func RegisterCriticalSectionServiceServer(s grpc.ServiceRegistrar, srv CriticalSectionServiceServer) {
	s.RegisterService(&CriticalSectionService_ServiceDesc, srv)
}

func _CriticalSectionService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CriticalSectionService/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServiceServer).Request(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalSectionService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CriticalSectionService/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServiceServer).Reply(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _CriticalSectionService_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CriticalSectionServiceServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CriticalSectionService/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CriticalSectionServiceServer).Release(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// CriticalSectionService_ServiceDesc is the grpc.ServiceDesc for CriticalSectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CriticalSectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CriticalSectionService",
	HandlerType: (*CriticalSectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _CriticalSectionService_Request_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _CriticalSectionService_Reply_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _CriticalSectionService_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
